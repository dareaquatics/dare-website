# TODO: Login form fix 

name: Update Policy Documents

on:
 # schedule:
 #   - cron: '0 0 * * 1'  # Runs weekly on Monday at midnight UTC
  workflow_dispatch:  # Allows manual triggering

jobs:
  update-policies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 selenium webdriver_manager PyPDF2

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Download and update policy documents
        env:
          TU_USERNAME: ${{ secrets.TU_USERNAME }}
          TU_PASSWORD: ${{ secrets.TU_PASSWORD }}
        run: |
          import os
          import time
          import requests
          import logging
          import json
          import re
          import hashlib
          import mimetypes
          import urllib.parse
          from bs4 import BeautifulSoup
          from selenium import webdriver
          from selenium.webdriver.chrome.service import Service
          from selenium.webdriver.chrome.options import Options
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait
          from selenium.webdriver.support import expected_conditions as EC
          from selenium.common.exceptions import TimeoutException, NoSuchElementException
          from webdriver_manager.chrome import ChromeDriverManager
          from PyPDF2 import PdfReader

          # Set up logging
          logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
          logger = logging.getLogger()

          # Configuration
          LOGIN_URL = "https://user.sportngin.com/users/sign_in"
          POLICIES_PAGE_URL = "https://www.gomotionapp.com/team/cadas/page/newsletter?team=cadas"
          GITHUB_POLICIES_DIR = 'assets/policies'

          # Get login credentials from environment variables
          USERNAME = os.environ.get('TU_USERNAME')
          PASSWORD = os.environ.get('TU_PASSWORD')

          if not USERNAME or not PASSWORD:
              logger.error("Login credentials not provided")
              exit(1)

          def setup_driver():
              chrome_options = Options()
              chrome_options.add_argument("--headless")
              chrome_options.add_argument("--no-sandbox")
              chrome_options.add_argument("--disable-dev-shm-usage")
              service = Service(ChromeDriverManager().install())
              driver = webdriver.Chrome(service=service, options=chrome_options)
              return driver

          def login(driver):
              try:
                  logger.info(f"Navigating to login page: {LOGIN_URL}")
                  driver.get(LOGIN_URL)
                  
                  logger.info("Waiting for email input field")
                  email_input = WebDriverWait(driver, 10).until(
                      EC.presence_of_element_located((By.ID, "user_login"))
                  )
                  logger.info(f"Entering email: {USERNAME}")
                  email_input.send_keys(USERNAME)
                  
                  logger.info("Looking for continue button")
                  continue_button = driver.find_element(By.CSS_SELECTOR, "input[type='submit']")
                  logger.info("Clicking continue button")
                  continue_button.click()
                  
                  logger.info("Waiting for password input field")
                  password_input = WebDriverWait(driver, 10).until(
                      EC.presence_of_element_located((By.ID, "user_password"))
                  )
                  logger.info("Entering password")
                  password_input.send_keys(PASSWORD)
                  
                  logger.info("Looking for sign in button")
                  sign_in_button = WebDriverWait(driver, 10).until(
                      EC.element_to_be_clickable((By.XPATH, "//input[@type='submit' and @value='Sign in']"))
                  )
                  logger.info("Clicking sign in button")
                  sign_in_button.click()

                  logger.info("Waiting for login process to complete")
                  WebDriverWait(driver, 20).until(
                      EC.url_contains("gomotionapp.com")
                  )

                  logger.info(f"Current URL after login: {driver.current_url}")

                  logger.info(f"Navigating to policies page: {POLICIES_PAGE_URL}")
                  driver.get(POLICIES_PAGE_URL)

                  logger.info("Waiting for policies page to load")
                  WebDriverWait(driver, 20).until(
                      EC.presence_of_element_located((By.XPATH, "//h3[contains(text(), 'Team Policy Documents')]"))
                  )

                  logger.info("Successfully logged in and navigated to policies page")
                  return True
              except TimeoutException as e:
                  logger.error(f"Timeout error during login: {str(e)}")
                  logger.error(f"Current URL: {driver.current_url}")
                  logger.error(f"Page source: {driver.page_source[:1000]}...")  # Log first 1000 characters of page source
                  return False
              except NoSuchElementException as e:
                  logger.error(f"Element not found during login: {str(e)}")
                  logger.error(f"Current URL: {driver.current_url}")
                  logger.error(f"Page source: {driver.page_source[:1000]}...")  # Log first 1000 characters of page source
                  return False
              except Exception as e:
                  logger.error(f"Unexpected error during login: {str(e)}")
                  logger.error(f"Current URL: {driver.current_url}")
                  logger.error(f"Page source: {driver.page_source[:1000]}...")  # Log first 1000 characters of page source
                  return False

          def get_policy_documents(driver):
              try:
                  # Wait for the policy table to be present
                  policy_table = WebDriverWait(driver, 10).until(
                      EC.presence_of_element_located((By.XPATH, "//table[@style='width:600px;']"))
                  )
                  
                  soup = BeautifulSoup(driver.page_source, 'html.parser')
                  policy_table = soup.find('table', {'style': 'width:600px;'})
                  
                  if not policy_table:
                      logger.error("Policy table not found on the page")
                      return []
                  
                  policies = []
                  for row in policy_table.find_all('tr')[1:]:  # Skip header row
                      cols = row.find_all('td')
                      if len(cols) >= 2:
                          link = cols[0].find('a')
                          if link:
                              name = link.text.strip()
                              url = link.get('href')
                              if not url.startswith('http'):
                                  url = urllib.parse.urljoin(POLICIES_PAGE_URL, url)
                              last_updated = cols[1].text.strip()
                              policies.append({'name': name, 'url': url, 'last_updated': last_updated})
                  
                  return policies
              except Exception as e:
                  logger.error(f"Error fetching policy documents: {str(e)}")
                  return []

          def download_policy(session, url):
              try:
                  response = session.get(url, timeout=30)
                  response.raise_for_status()
                  return response.content
              except Exception as e:
                  logger.error(f"Error downloading policy from {url}: {str(e)}")
                  return None

          def is_valid_pdf(file_path):
              if not mimetypes.guess_type(file_path)[0] == 'application/pdf':
                  return False
              try:
                  PdfReader(file_path)
                  return True
              except:
                  return False

          def get_file_hash(file_path):
              try:
                  with open(file_path, 'rb') as f:
                      return hashlib.md5(f.read()).hexdigest()
              except IOError as e:
                  logger.error(f"Error reading file {file_path}: {str(e)}")
                  return None

          def find_matching_file(directory, policy_name):
              try:
                  for filename in os.listdir(directory):
                      if filename.lower().replace(' ', '-') == policy_name.lower().replace(' ', '-'):
                          return filename
              except OSError as e:
                  logger.error(f"Error accessing directory {directory}: {str(e)}")
              return None

          def safe_file_write(file_path, content):
              try:
                  with open(file_path, 'wb') as f:
                      f.write(content)
                  return True
              except IOError as e:
                  logger.error(f"Error writing to file {file_path}: {str(e)}")
                  return False

          driver = setup_driver()
          try:
              if not login(driver):
                  logger.error("Failed to log in. Exiting.")
                  exit(1)

              policies = get_policy_documents(driver)
              if not policies:
                  logger.error("No policies found or error occurred while fetching policies")
                  exit(1)

              os.makedirs(GITHUB_POLICIES_DIR, exist_ok=True)

              session = requests.Session()
              for cookie in driver.get_cookies():
                  session.cookies.set(cookie['name'], cookie['value'], domain=cookie['domain'])

              updated_files = []
              changes = {}

              for policy in policies:
                  try:
                      content = download_policy(session, policy['url'])
                      if content is None:
                          continue

                      matching_file = find_matching_file(GITHUB_POLICIES_DIR, policy['name'])
                      
                      if matching_file:
                          file_path = os.path.join(GITHUB_POLICIES_DIR, matching_file)
                          
                          temp_file = 'temp_policy.pdf'
                          if safe_file_write(temp_file, content):
                              if is_valid_pdf(temp_file):
                                  old_hash = get_file_hash(file_path)
                                  new_hash = get_file_hash(temp_file)
                                  if old_hash != new_hash:
                                      if os.path.exists(file_path):
                                          os.remove(file_path)
                                      os.rename(temp_file, file_path)
                                      logger.info(f"Updated {matching_file}")
                                      updated_files.append({'name': policy['name'], 'file': matching_file, 'last_updated': policy['last_updated']})
                                      changes[matching_file] = {'old_hash': old_hash, 'new_hash': new_hash}
                                  else:
                                      os.remove(temp_file)
                                      logger.info(f"No changes for {matching_file}")
                              else:
                                  os.remove(temp_file)
                                  logger.warning(f"Skipped invalid PDF file: {policy['name']}")
                      else:
                          new_name = re.sub(r'[^a-zA-Z0-9]+', '-', policy['name'].lower()) + '.pdf'
                          file_path = os.path.join(GITHUB_POLICIES_DIR, new_name)
                          if safe_file_write(file_path, content):
                              if is_valid_pdf(file_path):
                                  logger.info(f"Created new file: {new_name}")
                                  updated_files.append({'name': policy['name'], 'file': new_name, 'last_updated': policy['last_updated']})
                                  changes[new_name] = {'old_hash': None, 'new_hash': get_file_hash(file_path)}
                              else:
                                  os.remove(file_path)
                                  logger.warning(f"Skipped invalid PDF file: {policy['name']}")
                  except Exception as e:
                      logger.error(f"Error processing policy {policy['name']}: {str(e)}")

              if updated_files:
                  try:
                      with open('policies.html', 'w', encoding='utf-8') as f:
                          f.write('''
                          <html>
                          <head>
                              <title>DARE Aquatics - Policies</title>
                              <style>
                                  body { font-family: Arial, sans-serif; }
                                  table { border-collapse: collapse; width: 100%; }
                                  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                                  th { background-color: #f2f2f2; }
                              </style>
                          </head>
                          <body>
                              <h1>DARE Aquatics - Policies</h1>
                              <table>
                                  <tr>
                                      <th>Policy</th>
                                      <th>Last Updated</th>
                                  </tr>
                          ''')
                          for policy in updated_files:
                              f.write(f'''
                              <tr>
                                  <td><a href="assets/policies/{policy['file']}">{policy['name']}</a></td>
                                  <td>{policy['last_updated']}</td>
                              </tr>
                              ''')
                          f.write('''
                              </table>
                          </body>
                          </html>
                          ''')
                      logger.info("Updated policies.html")
                      
                      # Write changes to a JSON file
                      with open('policy_changes.json', 'w') as f:
                          json.dump(changes, f, indent=2)
                      logger.info("Recorded policy changes in policy_changes.json")
                  except IOError as e:
                      logger.error(f"Error writing update files: {str(e)}")
              else:
                  logger.info("No updates to policies needed")

          finally:
              driver.quit()

        shell: python

      - name: Commit and push if changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --quiet && git diff --staged --quiet || (git commit -m "Update policy documents" && git push)
